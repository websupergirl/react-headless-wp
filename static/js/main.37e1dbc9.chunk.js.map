{"version":3,"sources":["Posts/Posts.js","Posts/Post.js","App.js","serviceWorker.js","index.js"],"names":["Posts","query","gql","loading","data","error","posts","edges","map","post","key","node","title","to","slug","Post","props","this","dangerouslySetInnerHTML","__html","content","React","PureComponent","GetPostBySlug","graphql","options","variables","match","params","client","ApolloClient","uri","App","className","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yiBAKA,IAwCeA,EAxCD,kBACZ,kBAAC,IAAD,CAAOC,MAAOC,IAAF,OAcF,YAA+B,IAA5BC,EAA2B,EAA3BA,QAAgBC,GAAW,EAAlBC,MAAkB,EAAXD,MACjB,OAAID,EACM,wCAGR,6BAEQC,EAAKE,MAAMC,MAAMC,KAAI,SAACC,EAAMC,GAC1B,OACE,yBAAKA,IAAKA,GACR,4BAAKD,EAAKE,KAAKC,OACf,kBAAC,IAAD,CAAMC,GAAE,gBAAWJ,EAAKE,KAAKG,OAA7B,sB,qRC3BxBC,E,iLACM,IACAC,EAAUC,KAAVD,MAER,OAAKA,EAAMZ,KAAKK,KAKd,6BACE,4BAAKO,EAAMZ,KAAKK,KAAKG,OACrB,yBAAKM,wBAAyB,CAACC,OAAQH,EAAMZ,KAAKK,KAAKW,YANjD,4C,GALKC,IAAMC,eAiBnBC,EAAgBrB,IAAH,KAUJsB,cAAQD,EAAe,CACpCE,QAAS,SAACT,GAER,MAAO,CACLU,UAAW,CACTZ,KAHaE,EAAMW,MAAMC,OAArBd,SAFGU,CASZT,GCjCGc,EAAS,IAAIC,IAAa,CAC9BC,IAAK,4CAsBQC,MAnBf,WACE,OACE,kBAAC,IAAD,CAAgBH,OAAQA,GACtB,kBAAC,IAAD,KACE,6BACE,gCACE,kEAEF,yBAAKI,UAAU,WACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOmC,KAAK,SAASC,UAAWpC,IAChC,kBAAC,IAAD,CAAOmC,KAAK,cAAcC,UAAWrB,SCV7BsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.37e1dbc9.chunk.js","sourcesContent":["import React from 'react';\nimport { Query } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { Link } from 'react-router-dom';\n\nconst Posts = () => (\n  <Query query={gql`\n    {\n        posts {\n            edges {\n                node {\n                    title\n                    slug\n                }\n            }\n        }\n    }  \n    `}\n  >\n    {\n            ({ loading, error, data }) => {\n              if (loading) {\n                return (<h1>Hang on!</h1>);\n              }\n              return (\n                <div>\n                  {\n                        data.posts.edges.map((post, key) => {\n                          return (\n                            <div key={key}>\n                              <h3>{post.node.title}</h3>\n                              <Link to={`/post/${post.node.slug}`}>Read More</Link>\n                            </div>\n                          );\n                        })\n                        }\n                </div>\n              );\n            }\n        }\n\n  </Query>\n\n);\n\nexport default Posts;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { graphql } from 'react-apollo';\n\nclass Post extends React.PureComponent {\n  render() {\n    const { props } = this;\n\n    if (!props.data.post) {\n      return (<h2>Hang on!</h2>);\n    }\n\n    return (\n      <div>\n        <h2>{props.data.post.title}</h2>\n        <div dangerouslySetInnerHTML={{__html: props.data.post.content}} />\n      </div>\n    );\n  }\n}\n\nconst GetPostBySlug = gql`\n    query getPostBySlug($slug: String) {\n        post: postBy(uri: $slug) {\n            title\n            slug\n            content\n        }\n    }\n`;\n\nexport default graphql(GetPostBySlug, {\n  options: (props) => {\n    const { slug } = props.match.params;\n    return {\n      variables: {\n        slug,\n      },\n    };\n  },\n})(Post);\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Posts from './Posts/Posts';\nimport Post from './Posts/Post';\n\nconst client = new ApolloClient({\n  uri: 'https://headless.thedevdrop.com/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <div>\n          <header>\n            <h1>Headless WordPress and React Test</h1>\n          </header>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Posts} />\n            <Route path=\"/posts\" component={Posts} />\n            <Route path=\"/post/:slug\" component={Post} />\n          </div>\n        </div>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}